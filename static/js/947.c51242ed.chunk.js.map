{"version":3,"file":"static/js/947.c51242ed.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.jsx","service/MoviesApi.jsx"],"sourcesContent":["import { Link, Outlet, useParams, Route, useLocation } from 'react-router-dom';\r\nimport { useState, useEffect, Suspense } from 'react';\r\nimport Api from '../../service/MoviesApi';\r\n// import Reviews from 'components/Reviews/Reviews';\r\n\r\n// import axios from 'axios';\r\n\r\nexport default function MovieDetails({ changeMovieId }) {\r\n  const baseImageUrl = 'https://image.tmdb.org/t/p/w500';\r\n  const { movieId } = useParams();\r\n  const [movieDetails, setMovieDetails] = useState([]);\r\n  // console.log(movieId);\r\n  const location = useLocation();\r\n  console.log(location);\r\n  const backHref = location.state?.from ?? '/';\r\n\r\n  useEffect(() => {\r\n    async function getResponse() {\r\n      const response = await Api.getMovieDetails(movieId);\r\n      setMovieDetails(response);\r\n      changeMovieId(movieId);\r\n    }\r\n\r\n    getResponse();\r\n  }, []);\r\n  const {\r\n    genres = [],\r\n    poster_path,\r\n    vote_average,\r\n    title,\r\n    overview,\r\n  } = movieDetails;\r\n  // console.log('genres array', genres);\r\n  return (\r\n    <>\r\n      <br />\r\n      <Link to={backHref}>\r\n        <button>Go back</button>\r\n      </Link>\r\n      <h1>{title}</h1>;<p>{vote_average}</p>\r\n      <img src={`${baseImageUrl}${poster_path}`} alt={title} width=\"360\" />\r\n      <h2>Overview</h2>\r\n      <p>{overview}</p>\r\n      <h2>Genres</h2>\r\n      {\r\n        <ul>\r\n          {genres.map(g => {\r\n            <div>map</div>;\r\n          })}\r\n        </ul>\r\n      }\r\n      <p>Additional information</p>\r\n      <Link to=\"cast\">cast</Link>\r\n      <br />\r\n      <Link to=\"reviews\">reviews</Link>\r\n      <Suspense fallback={<h2>load</h2>}>\r\n        <Outlet />\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n//<li key={g.id}>{g.name}</li>;\r\n","import axios from 'axios';\r\nimport { func } from 'prop-types';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'ru-Ru',\r\n};\r\n\r\nasync function trendApi() {\r\n  const config = {\r\n    url: `trending/movie/day`,\r\n  };\r\n\r\n  const { data } = await axios(config);\r\n\r\n  // console.log('response Api', data);\r\n  return data.results;\r\n}\r\nasync function getMovieDetails(movieId) {\r\n  const config = {\r\n    url: `movie/${movieId}`,\r\n  };\r\n  const { data } = await axios(config);\r\n\r\n  console.log(data);\r\n  return data;\r\n}\r\nasync function searchMovie(movieSearch) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `search/movie`,\r\n    params: {\r\n      query: movieSearch,\r\n    },\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  // console.log(response);\r\n  return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieCast(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/credits`,\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  console.log('cast', data.cast);\r\n  return data.cast; // возвращаем из свойства data свойство cast/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieReviews(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/reviews`,\r\n    params: {\r\n      language: 'en-Us',\r\n    },\r\n  };\r\n  try {\r\n    const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n    console.log('reviews', data.results);\r\n    return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив отзывов  content ( отзыв) и name ( имя автора)\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n}\r\nconst Api = {\r\n  trendApi,\r\n  getMovieDetails,\r\n  searchMovie,\r\n  getMovieCast,\r\n  getMovieReviews,\r\n};\r\n\r\nexport default Api;\r\n"],"names":["MovieDetails","changeMovieId","movieId","useParams","useState","movieDetails","setMovieDetails","location","useLocation","console","log","backHref","state","from","useEffect","Api","response","getResponse","genres","poster_path","vote_average","title","overview","to","src","alt","width","map","g","Suspense","fallback","trendApi","config","url","axios","data","results","getMovieDetails","searchMovie","movieSearch","params","query","getMovieCast","cast","getMovieReviews","language","message","api_key"],"sourceRoot":""}