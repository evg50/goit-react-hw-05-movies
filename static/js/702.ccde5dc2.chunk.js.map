{"version":3,"file":"static/js/702.ccde5dc2.chunk.js","mappings":"yOAKe,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAuCA,OA1BAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAQ,mCAAG,oGACIC,EAAAA,EAAAA,WADJ,QACTC,EADS,QAENC,QACPL,EAAUI,GAHG,2CAAH,qDAaTL,EAAOM,QACVH,MASD,KAED,4BACE,4CAEA,SAAC,IAAD,CAAYH,OAAQA,S,qFC/CX,SAASO,EAAT,GAAiC,IAAXP,EAAU,EAAVA,OAE7BQ,GAAWC,EAAAA,EAAAA,MAGjB,OADAC,QAAQC,IAAIX,IAEV,wBACGA,EAAOY,KAAI,SAAAC,GAAK,OACf,2BACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMT,GAAhD,SACGK,EAAMK,SAGT,gBACEC,IAAG,UAbQ,mCAaR,OAAoBN,EAAMO,eAC7BC,IAAKR,EAAMK,MACXI,MAAM,UARDT,EAAME,W,yECARQ,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+FACQC,EAAS,CACbC,IAAI,sBAFR,SAKyBC,GAAAA,CAAMF,GAL/B,uBAKUG,EALV,EAKUA,KALV,kBAQSA,EAAKC,SARd,kEAUeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,kFACQN,EAAS,CACbC,IAAI,SAAD,OAAWK,IAFlB,SAIyBJ,GAAAA,CAAMF,GAJ/B,uBAIUG,EAJV,EAIUA,KAERjB,QAAQC,IAAIgB,GANd,kBAOSA,GAPT,kEASeI,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,kFAEQR,EAAS,CACbC,IAAI,eACJQ,OAAQ,CACNC,MAAOF,IALb,SAQyBN,GAAAA,CAAMF,GAR/B,uBAQUG,EARV,EAQUA,KARV,kBAWSA,EAAKC,SAXd,kEAaeO,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BL,GAA5B,kFAEQN,EAAS,CACbC,IAAI,SAAD,OAAWK,EAAX,aAHP,SAKyBJ,GAAAA,CAAMF,GAL/B,uBAKUG,EALV,EAKUA,KAERjB,QAAQC,IAAI,OAAQgB,EAAKS,MAP3B,kBAQST,EAAKS,MARd,kEAUeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BP,GAA/B,kFAEQN,EAAS,CACbC,IAAI,SAAD,OAAWK,EAAX,YACHG,OAAQ,CACNK,SAAU,UALhB,kBAS2BZ,GAAAA,CAAMF,GATjC,uBASYG,EATZ,EASYA,KAERjB,QAAQC,IAAI,UAAWgB,EAAKC,SAXhC,kBAYWD,EAAKC,SAZhB,2DAcW,KAAIW,SAdf,iFAhDAb,IAAAA,SAAAA,QADiB,gCAEjBA,IAAAA,SAAAA,OAAwB,CACtBc,QAJc,mCAKdF,SAAU,SA8DZ,IAAMlC,EAAM,CACVmB,SAjEF,WAKeA,OAAAA,EAAAA,MAAAA,KAAAA,YA6DbM,gBA7DF,SAU+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,YAoDbE,YApDF,SAS2B,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,YA4CbI,aA5CF,SAa4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,YAgCbE,gBAhCF,SAU+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,aAyBf","sources":["components/Trend/Trend.jsx","pages/MoviesView.jsx","service/MoviesApi.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport React, { useState, useEffect } from 'react';\r\nimport MoviesView from '../../pages/MoviesView';\r\nimport Api from '../../service/MoviesApi';\r\n\r\nexport default function Trend() {\r\n  const [movies, setMovies] = useState([]);\r\n  // const location = useLocation();\r\n  // console.log(location);\r\n  // const backHref = location.state?.from ?? '/';\r\n\r\n  // async function getResponse() {\r\n  //   const responses = await Api.trendApi();\r\n  //   if (responses.length) {\r\n  //     setMovies(responses);\r\n  //     // console.log(responses);\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    // console.log('до', movies.length);\r\n    const getFetch = async () => {\r\n      const resp = await Api.trendApi();\r\n      if (resp.length) {\r\n        setMovies(resp);\r\n      }\r\n    };\r\n    // async function gResponse() {\r\n    //   const responses = await Api.trendApi();\r\n    //   if (responses.length) {\r\n    //     setMovies(responses);\r\n    //     // console.log(responses);\r\n    //   }\r\n    // }\r\n    if (!movies.length) {\r\n      getFetch();\r\n\r\n      //   console.log('после', movies.length);\r\n      //   // getResponse();\r\n      //   return;\r\n      // }\r\n    }\r\n\r\n    // console.log(movies);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h2>Trending today</h2>\r\n\r\n      <MoviesView movies={movies} />\r\n    </div>\r\n  );\r\n}\r\n//\r\n","import { Link, useLocation } from 'react-router-dom';\r\n\r\nexport default function MoviesView({ movies }) {\r\n  const baseImageUrl = 'https://image.tmdb.org/t/p/w500';\r\n  const location = useLocation();\r\n\r\n  console.log(movies);\r\n  return (\r\n    <ul>\r\n      {movies.map(movie => (\r\n        <li key={movie.id}>\r\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\r\n            {movie.title}\r\n          </Link>\r\n\r\n          <img\r\n            src={`${baseImageUrl}${movie.backdrop_path}`}\r\n            alt={movie.title}\r\n            width=\"300\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport { func } from 'prop-types';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'ru-Ru',\r\n};\r\n\r\nasync function trendApi() {\r\n  const config = {\r\n    url: `trending/movie/day`,\r\n  };\r\n\r\n  const { data } = await axios(config);\r\n\r\n  // console.log('response Api', data);\r\n  return data.results;\r\n}\r\nasync function getMovieDetails(movieId) {\r\n  const config = {\r\n    url: `movie/${movieId}`,\r\n  };\r\n  const { data } = await axios(config);\r\n\r\n  console.log(data);\r\n  return data;\r\n}\r\nasync function searchMovie(movieSearch) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `search/movie`,\r\n    params: {\r\n      query: movieSearch,\r\n    },\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  // console.log(response);\r\n  return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieCast(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/credits`,\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  console.log('cast', data.cast);\r\n  return data.cast; // возвращаем из свойства data свойство cast/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieReviews(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/reviews`,\r\n    params: {\r\n      language: 'en-Us',\r\n    },\r\n  };\r\n  try {\r\n    const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n    console.log('reviews', data.results);\r\n    return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив отзывов  content ( отзыв) и name ( имя автора)\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n}\r\nconst Api = {\r\n  trendApi,\r\n  getMovieDetails,\r\n  searchMovie,\r\n  getMovieCast,\r\n  getMovieReviews,\r\n};\r\n\r\nexport default Api;\r\n"],"names":["Trend","useState","movies","setMovies","useEffect","getFetch","Api","resp","length","MoviesView","location","useLocation","console","log","map","movie","to","id","state","from","title","src","backdrop_path","alt","width","trendApi","config","url","axios","data","results","getMovieDetails","movieId","searchMovie","movieSearch","params","query","getMovieCast","cast","getMovieReviews","language","message","api_key"],"sourceRoot":""}