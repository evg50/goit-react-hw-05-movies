{"version":3,"file":"static/js/867.d49b4d8a.chunk.js","mappings":"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","sources":["components/Search.jsx","components/SearchBar/SearchBar.jsx","pages/MoviesView.jsx","service/MoviesApi.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function Search({ onChange, value }) {\r\n  const [search, setSearch] = useState('');\r\n  return (\r\n    <div>\r\n      <input\r\n        autoFocus\r\n        type=\"text\"\r\n        // value={value && ''}\r\n        onChange={e => setSearch(e.target.value)}\r\n      />\r\n      <input type=\"submit\" onClick={() => onChange(search)} />\r\n    </div>\r\n  );\r\n}\r\n","import { Link, useLocation, useSearchParams } from 'react-router-dom';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Api from '../../service/MoviesApi';\r\nimport Search from '../Search';\r\n// Search\r\nimport MoviesView from '../../pages/MoviesView';\r\nexport default function SearchBar() {\r\n  const [movies, setMovies] = useState([]);\r\n  // const [search, setSearch] = useState('');\r\n\r\n  // const changeSearch = e => {\r\n  //   setSearch(e.target.value);\r\n  // };\r\n  const [params, setParams] = useSearchParams();\r\n  const location = useLocation();\r\n  // async function submitHeandler(e) {\r\n  //   e.preventdefault(e);\r\n  //   // const response = await Api.searchMovie(e.target.value);\r\n  //   console.log('submit', e);\r\n  //   // return response;\r\n  // }\r\n\r\n  // запись в строку сост и в стейт серча\r\n  const onChangeString = e => {\r\n    console.log(e);\r\n    setParams({ query: e });\r\n\r\n    // setSearch(e);\r\n  };\r\n  // async function fetchApi(getParams) {\r\n  //   if (!getParams) {\r\n  //     getSearchParams();\r\n  //   }\r\n\r\n  // const response = await Api.searchMovie(getParams);\r\n  // console.log(response);\r\n  // return response;\r\n  // }\r\n  // запись в гет парамс строку запроса\r\n  // function getSearchParams() {\r\n  //   const getParams = params.get('query');\r\n  //   // console.log(getParams);\r\n  //   return getParams;\r\n  // }\r\n  // оптравка на сервис за http запросом\r\n  // async function fetchSearch(getParams) {\r\n  //   const response = await fetchApi(getParams);\r\n  //   console.log(response);\r\n  //   setMovies(response);\r\n  //   return response;\r\n  // }\r\n  useEffect(() => {\r\n    // const getParams = getSearchParams();\r\n    // console.log('useEffect');\r\n    const getParams = params.get('query');\r\n    // console.log(getParams);\r\n    const fetchData = async searchMovie => {\r\n      const data = await Api.searchMovie(searchMovie);\r\n      console.log('data', data);\r\n      setMovies(data);\r\n      // return data;\r\n    };\r\n    if (getParams) {\r\n      console.log('QUERY HTTP', fetchData(getParams));\r\n\r\n      fetchData(getParams);\r\n      console.log('location в поиске', location);\r\n      // location.state = { from: location };\r\n      console.log('location в поиске after', location);\r\n      return;\r\n    }\r\n  }, [params]);\r\n  // const queryParams = params.get('query');\r\n  return (\r\n    <div>\r\n      <h1>Movies</h1>\r\n\r\n      {/* <Link to=\"/\">\r\n        <button>Go back Movies</button>\r\n      </Link> */}\r\n      <br />\r\n\r\n      <Search onChange={onChangeString} value={movies} />\r\n      {movies.length && <MoviesView movies={movies} />}\r\n    </div>\r\n  );\r\n}\r\n","import { Link, useLocation } from 'react-router-dom';\r\n\r\nexport default function MoviesView({ movies }) {\r\n  const baseImageUrl = 'https://image.tmdb.org/t/p/w500';\r\n  const location = useLocation();\r\n\r\n  console.log(movies);\r\n  return (\r\n    <ul>\r\n      {movies.map(movie => (\r\n        <li key={movie.id}>\r\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\r\n            {movie.title}\r\n          </Link>\r\n\r\n          <img\r\n            src={`${baseImageUrl}${movie.backdrop_path}`}\r\n            alt={movie.title}\r\n            width=\"300\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport { func } from 'prop-types';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'ru-Ru',\r\n};\r\n\r\nasync function trendApi() {\r\n  const config = {\r\n    url: `trending/movie/day`,\r\n  };\r\n\r\n  const { data } = await axios(config);\r\n\r\n  // console.log('response Api', data);\r\n  return data.results;\r\n}\r\nasync function getMovieDetails(movieId) {\r\n  const config = {\r\n    url: `movie/${movieId}`,\r\n  };\r\n  const { data } = await axios(config);\r\n\r\n  console.log(data);\r\n  return data;\r\n}\r\nasync function searchMovie(movieSearch) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `search/movie`,\r\n    params: {\r\n      query: movieSearch,\r\n    },\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  // console.log(response);\r\n  return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieCast(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/credits`,\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  console.log('cast', data.cast);\r\n  return data.cast; // возвращаем из свойства data свойство cast/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieReviews(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/reviews`,\r\n    params: {\r\n      language: 'en-Us',\r\n    },\r\n  };\r\n  try {\r\n    const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n    console.log('reviews', data.results);\r\n    return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив отзывов  content ( отзыв) и name ( имя автора)\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n}\r\nconst Api = {\r\n  trendApi,\r\n  getMovieDetails,\r\n  searchMovie,\r\n  getMovieCast,\r\n  getMovieReviews,\r\n};\r\n\r\nexport default Api;\r\n"],"names":["Search","onChange","value","useState","search","setSearch","autoFocus","type","e","target","onClick","SearchBar","movies","setMovies","useSearchParams","params","setParams","location","useLocation","useEffect","getParams","get","fetchData","searchMovie","Api","data","console","log","query","length","MoviesView","map","movie","to","id","state","from","title","src","backdrop_path","alt","width","trendApi","config","url","axios","results","getMovieDetails","movieId","movieSearch","getMovieCast","cast","getMovieReviews","language","message","api_key"],"sourceRoot":""}