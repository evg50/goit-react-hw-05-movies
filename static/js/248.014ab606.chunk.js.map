{"version":3,"file":"static/js/248.014ab606.chunk.js","mappings":"+NAAe,SAASA,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAGjC,OACE,wBACGA,EAAKC,KAAI,SAAAD,GAAI,OACZ,oCACUA,EAAKE,MACb,kBAFF,cAGcF,EAAKG,WACjB,gBACEC,IAAG,UAVQ,mCAUR,OAAoBJ,EAAKK,cAC5BC,IAAI,MACJC,MAAM,UAPDP,EAAKQ,SCFP,SAASC,EAAT,GAAuB,IAAPD,EAAM,EAANA,GAC7BE,QAAQC,IAAI,mBAAoBH,GAChC,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KA0BA,OAtBAC,EAAAA,EAAAA,YAAU,WAKR,IAAMC,EAAS,mCAAG,WAAMC,GAAN,uFACGC,EAAAA,EAAAA,aAAiBD,GAASE,OAAM,SAAAC,GACjDT,QAAQC,IAAIQ,MAFE,cACVC,EADU,OAIhBV,QAAQC,IAAI,mBAAoBS,GAChCP,EAAQO,GALQ,kBAOTA,GAPS,2CAAH,sDASf,GAAIZ,EAIF,OAHAO,EAAUP,QACVE,QAAQC,IAAI,kBAAmBH,KAIhC,CAACA,KAGF,mCAEE,SAACT,EAAD,CAAUC,KAAMA,S,yECzBPqB,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+FACQC,EAAS,CACbC,IAAI,sBAFR,SAKyBC,GAAAA,CAAMF,GAL/B,uBAKUF,EALV,EAKUA,KALV,kBAQSA,EAAKK,SARd,kEAUeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BV,GAA/B,kFACQM,EAAS,CACbC,IAAI,SAAD,OAAWP,IAFlB,SAIyBQ,GAAAA,CAAMF,GAJ/B,uBAIUF,EAJV,EAIUA,KAERV,QAAQC,IAAIS,GANd,kBAOSA,GAPT,kEASeO,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,kFAEQN,EAAS,CACbC,IAAI,eACJM,OAAQ,CACNC,MAAOF,IALb,SAQyBJ,GAAAA,CAAMF,GAR/B,uBAQUF,EARV,EAQUA,KARV,kBAWSA,EAAKK,SAXd,kEAaeM,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4Bf,GAA5B,kFAEQM,EAAS,CACbC,IAAI,SAAD,OAAWP,EAAX,aAHP,SAKyBQ,GAAAA,CAAMF,GAL/B,uBAKUF,EALV,EAKUA,KAERV,QAAQC,IAAI,OAAQS,EAAKpB,MAP3B,kBAQSoB,EAAKpB,MARd,kEAUegC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BhB,GAA/B,kFAEQM,EAAS,CACbC,IAAI,SAAD,OAAWP,EAAX,YACHa,OAAQ,CACNI,SAAU,UALhB,kBAS2BT,GAAAA,CAAMF,GATjC,uBASYF,EATZ,EASYA,KAERV,QAAQC,IAAI,UAAWS,EAAKK,SAXhC,kBAYWL,EAAKK,SAZhB,2DAcW,KAAIS,SAdf,iFAhDAV,IAAAA,SAAAA,QADiB,gCAEjBA,IAAAA,SAAAA,OAAwB,CACtBW,QAJc,mCAKdF,SAAU,SA8DZ,IAAMhB,EAAM,CACVI,SAjEF,WAKeA,OAAAA,EAAAA,MAAAA,KAAAA,YA6DbK,gBA7DF,SAU+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,YAoDbC,YApDF,SAS2B,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,YA4CbI,aA5CF,SAa4B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,YAgCbC,gBAhCF,SAU+B,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,aAyBf","sources":["pages/CastView.jsx","components/Cast/Cast.jsx","service/MoviesApi.jsx"],"sourcesContent":["export default function CastView({ cast }) {\r\n  const baseImageUrl = 'https://image.tmdb.org/t/p/w500';\r\n\r\n  return (\r\n    <ul>\r\n      {cast.map(cast => (\r\n        <li key={cast.id}>\r\n          name : {cast.name}\r\n          <br />\r\n          character: {cast.character}\r\n          <img\r\n            src={`${baseImageUrl}${cast.profile_path}`}\r\n            alt=\"img\"\r\n            width=\"150\"\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import Api from '../../service/MoviesApi';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport CastView from '../../pages/CastView';\r\nexport default function Cast({ id }) {\r\n  console.log('component cast :', id);\r\n  const [cast, setCast] = useState([]);\r\n  // const location = useLocation();\r\n  // const backHref = location.state?.from ?? '/';\r\n  // const { movieId } = useParams();\r\n  useEffect(() => {\r\n    // const getParams = getSearchParams();\r\n    // console.log('useEffect');\r\n    // const getParams = params.get('');\r\n    // console.log(getParams);\r\n    const fetchData = async movieId => {\r\n      const data = await Api.getMovieCast(movieId).catch(error => {\r\n        console.log(error);\r\n      });\r\n      console.log('response servise', data);\r\n      setCast(data);\r\n\r\n      return data;\r\n    };\r\n    if (id) {\r\n      fetchData(id);\r\n      console.log('QUERY HTTP cast', id);\r\n\r\n      return;\r\n    }\r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      Cast\r\n      <CastView cast={cast} />\r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport { func } from 'prop-types';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'ru-Ru',\r\n};\r\n\r\nasync function trendApi() {\r\n  const config = {\r\n    url: `trending/movie/day`,\r\n  };\r\n\r\n  const { data } = await axios(config);\r\n\r\n  // console.log('response Api', data);\r\n  return data.results;\r\n}\r\nasync function getMovieDetails(movieId) {\r\n  const config = {\r\n    url: `movie/${movieId}`,\r\n  };\r\n  const { data } = await axios(config);\r\n\r\n  console.log(data);\r\n  return data;\r\n}\r\nasync function searchMovie(movieSearch) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `search/movie`,\r\n    params: {\r\n      query: movieSearch,\r\n    },\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  // console.log(response);\r\n  return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieCast(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/credits`,\r\n  };\r\n  const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n  console.log('cast', data.cast);\r\n  return data.cast; // возвращаем из свойства data свойство cast/ на нем лежит массив фильмов\r\n}\r\nasync function getMovieReviews(movieId) {\r\n  // console.log(movieSearch);\r\n  const config = {\r\n    url: `movie/${movieId}/reviews`,\r\n    params: {\r\n      language: 'en-Us',\r\n    },\r\n  };\r\n  try {\r\n    const { data } = await axios(config); // деструктуризируем из ответа нужное нам свойство data\r\n\r\n    console.log('reviews', data.results);\r\n    return data.results; // возвращаем из свойства data свойство results/ на нем лежит массив отзывов  content ( отзыв) и name ( имя автора)\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n}\r\nconst Api = {\r\n  trendApi,\r\n  getMovieDetails,\r\n  searchMovie,\r\n  getMovieCast,\r\n  getMovieReviews,\r\n};\r\n\r\nexport default Api;\r\n"],"names":["CastView","cast","map","name","character","src","profile_path","alt","width","id","Cast","console","log","useState","setCast","useEffect","fetchData","movieId","Api","catch","error","data","trendApi","config","url","axios","results","getMovieDetails","searchMovie","movieSearch","params","query","getMovieCast","getMovieReviews","language","message","api_key"],"sourceRoot":""}